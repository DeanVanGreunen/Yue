{"ast":null,"code":"const API = {\n  baseURL: \"http://localhost:3001\",\n  sleep: milliseconds => {\n    var start = new Date().getTime();\n\n    for (var i = 0; i < 1e7; i++) {\n      if (new Date().getTime() - start > milliseconds) {\n        break;\n      }\n    }\n  },\n  user: {\n    check: async email => {\n      // returns api_key as string or false if invalid\n      let url = API.baseURL + \"/api/user/check\";\n      let body = JSON.stringify({\n        'email': email\n      });\n      const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n        body: body\n      });\n      let jdata = response.json();\n      return jdata;\n    },\n    register: async (email, password) => {\n      // returns api_key as string or false if invalid\n      let url = API.baseURL + \"/api/user/register\";\n      let body = JSON.stringify({\n        'email': email,\n        'password': password\n      });\n      const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n        body: body\n      });\n      let jdata = response.json();\n      return jdata;\n    },\n    login: async (email, password) => {\n      // returns api_key as string or false if invalid api_key\n      let url = API.baseURL + \"/api/user/login\";\n      let body = JSON.stringify({\n        'email': email,\n        'password': password\n      });\n      const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n        body: body\n      });\n      let jdata = response.json();\n      return jdata;\n    }\n  },\n  question: {\n    create: async (api_key, title, description) => {\n      // returns api_key as string or false if invalid api_key\n      let url = API.baseURL + \"/api/question/create\";\n      let body = JSON.stringify({\n        'api_key': api_key,\n        'title': title,\n        'description': description\n      });\n      const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n        body: body\n      });\n      let jdata = response.json();\n      return jdata;\n    },\n    list: async () => {\n      // returns api_key as string or false if invalid api_key\n      let url = API.baseURL + \"/api/question/list\";\n      let body = JSON.stringify({\n        'api_key': api_key,\n        'title': title,\n        'description': description\n      });\n      const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n        body: body\n      });\n      let jdata = response.json();\n      return jdata;\n    }\n  }\n};\nexport default API;","map":{"version":3,"sources":["C:/Projects/Liu/frontend/app/src/service/api.js"],"names":["API","baseURL","sleep","milliseconds","start","Date","getTime","i","user","check","email","url","body","JSON","stringify","response","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","jdata","json","register","password","login","question","create","api_key","title","description","list"],"mappings":"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","sourcesContent":["const API = {\r\n  baseURL: \"http://localhost:3001\",\r\n  sleep: (milliseconds) => {\r\n      var start = new Date().getTime();\r\n      for (var i = 0; i < 1e7; i++) {\r\n          if ((new Date().getTime() - start) > milliseconds) {\r\n              break;\r\n          }\r\n      }\r\n  },\r\n  user: {\r\n       check: async (email) => { // returns api_key as string or false if invalid\r\n            let url = API.baseURL + \"/api/user/check\";\r\n            let body = JSON.stringify({\r\n                'email': email,\r\n            });\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                redirect: 'follow',\r\n                referrerPolicy: 'no-referrer',\r\n                body: body\r\n            });\r\n            let jdata = response.json();\r\n            return jdata;\r\n        },\r\n      register: async (email, password) => { // returns api_key as string or false if invalid\r\n          let url = API.baseURL + \"/api/user/register\";\r\n          let body = JSON.stringify({\r\n              'email': email,\r\n              'password': password\r\n          });\r\n          const response = await fetch(url, {\r\n              method: 'POST',\r\n              mode: 'cors',\r\n              cache: 'no-cache',\r\n              credentials: 'same-origin',\r\n              headers: {\r\n                  'Content-Type': 'application/json'\r\n              },\r\n              redirect: 'follow',\r\n              referrerPolicy: 'no-referrer',\r\n              body: body\r\n          });\r\n          let jdata = response.json();\r\n          return jdata;\r\n      },\r\n      login: async (email, password) => { // returns api_key as string or false if invalid api_key\r\n          let url = API.baseURL + \"/api/user/login\";\r\n          let body = JSON.stringify({\r\n              'email': email,\r\n              'password': password\r\n          });\r\n          const response = await fetch(url, {\r\n              method: 'POST',\r\n              mode: 'cors',\r\n              cache: 'no-cache',\r\n              credentials: 'same-origin',\r\n              headers: {\r\n                  'Content-Type': 'application/json'\r\n              },\r\n              redirect: 'follow',\r\n              referrerPolicy: 'no-referrer',\r\n              body: body\r\n          });\r\n          let jdata = response.json();\r\n          return jdata;\r\n      },\r\n  },\r\n  question: {\r\n    create: async (api_key, title, description) => { // returns api_key as string or false if invalid api_key\r\n        let url = API.baseURL + \"/api/question/create\";\r\n        let body = JSON.stringify({\r\n            'api_key': api_key,\r\n            'title': title,\r\n            'description': description\r\n        });\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n            body: body\r\n        });\r\n        let jdata = response.json();\r\n        return jdata;\r\n    },\r\n    list: async () => { // returns api_key as string or false if invalid api_key\r\n        let url = API.baseURL + \"/api/question/list\";\r\n        let body = JSON.stringify({\r\n            'api_key': api_key,\r\n            'title': title,\r\n            'description': description\r\n        });\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n            body: body\r\n        });\r\n        let jdata = response.json();\r\n        return jdata;\r\n    },\r\n  }\r\n}\r\n\r\nexport default API;"]},"metadata":{},"sourceType":"module"}